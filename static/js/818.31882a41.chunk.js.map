{"version":3,"file":"static/js/818.31882a41.chunk.js","mappings":"4OAGaA,G,SAAmBC,EAAAA,EAAAA,UAASC,MAAM,CAC7CC,MAAMC,EAAAA,EAAAA,UAASC,OAAOC,SAASC,WAC/BC,QAAQJ,EAAAA,EAAAA,UAASK,MAAM,MAAMF,cAGlBG,GAAwBT,EAAAA,EAAAA,UAASC,MAAM,CAClDC,MAAMC,EAAAA,EAAAA,UAASC,OAAOC,SAASC,SAAS,cACxCI,OAAOP,EAAAA,EAAAA,UAASO,MAAM,sBAAsBJ,SAAS,qBACrDK,UAAUR,EAAAA,EAAAA,UACPG,SAAS,uBACTM,IAAI,EAAG,0CACPC,IAAI,GAAI,YACXC,iBAAiBX,EAAAA,EAAAA,UACdY,MAAM,EAACC,EAAAA,EAAAA,KAAI,aAAc,6BACzBV,SAAS,kCAGDW,GAAqBjB,EAAAA,EAAAA,UAASC,MAAM,CAC/CS,OAAOP,EAAAA,EAAAA,UAASO,MAAM,sBAAsBJ,SAAS,qBACrDK,UAAUR,EAAAA,EAAAA,UACPG,SAAS,uBACTM,IAAI,EAAG,0CACPC,IAAI,GAAI,a,2MCvBAK,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAMtBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEzBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQxB,KAAKyB,cAAcC,SAASL,EADR,GAG/B,I,oBCEGM,EAAgB,CACpB3B,KAAM,GACNK,OAAQ,IA8EV,EA3EoB,SAAC,GAAiB,IAAfuB,EAAc,EAAdA,QACfC,GAAWC,EAAAA,EAAAA,MACXZ,GAAWa,EAAAA,EAAAA,IAAYf,GAe7B,OACE,SAACgB,EAAA,EAAD,WACE,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,GAAI,CAAEC,eAAgB,UAAtC,UACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,WACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,0BACA,SAAC,KAAD,CACEd,cAAeA,EACfe,iBAAkB7C,EAAAA,GAClB8C,SAvBS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,WC1BN,SAAC3B,EAAU0B,GACrC,OAAO1B,EAAS4B,MAAK,SAAAtB,GAAO,OAAIA,EAAQxB,OAAS4C,EAAO5C,KAAKE,MAAjC,GAC7B,CDyBO6C,CAAa7B,EAAU0B,ICvBL,SAAC1B,EAAU0B,GACnC,OAAO1B,EAAS4B,MAAK,SAAAtB,GAAO,OAAIA,EAAQlB,QAAUsC,EAAOvC,OAAOH,MAApC,GAC7B,CDyBO8C,CAAW9B,EAAU0B,IAIzBf,GAASoB,EAAAA,EAAAA,IAAWL,IACpBC,IACAjB,KALEsB,MAAM,GAAD,OAAIN,EAAOvC,OAAX,4BAJL6C,MAAM,GAAD,OAAIN,EAAO5C,KAAX,2BAUR,EAQS,SAKG,SAAAmD,GACC,OACE,UAAC,KAAD,YAEE,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,MAAM,OACNC,KAAK,OACLvD,KAAK,OACLwD,WAAS,EACTf,QAAQ,WACRgB,OAAO,QACPC,YAAY,SAAC,KAAD,CAAc1D,KAAK,SAC/B2D,MAAOR,EAAMS,OAAOpD,OAAS2C,EAAMU,QAAQrD,SAG7C,SAAC,KAAD,CACE4C,GAAIC,EAAAA,EACJC,MAAM,SACNtD,KAAK,SACLuD,KAAK,MACLC,WAAS,EACTf,QAAQ,WACRgB,OAAO,QACPC,YAAY,SAAC,KAAD,CAAc1D,KAAK,WAC/B2D,MAAOR,EAAMS,OAAOnD,UAAY0C,EAAMU,QAAQpD,YAGhD,SAACqD,EAAA,EAAD,CACE3B,GAAI,CAAE4B,UAAW,UACjBtB,QAAQ,YACRc,KAAK,SACLS,MAAM,UAJR,sBAUL,YAOd,E,kBE9FYC,EAAiBC,EAAAA,EAAAA,IAAH,2QAWdC,EAAcD,EAAAA,EAAAA,EAAH,6CAIXE,EAAeF,EAAAA,EAAAA,KAAH,mE,UCfZG,EAAUH,EAAAA,EAAAA,IAAH,qNAYPI,EAAYJ,EAAAA,EAAAA,IAAH,6F,UCTTK,EAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAC/BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MACJL,GAEH,EAED,OADAM,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,CAACH,IAOJ,OACE,SAACS,EAAA,EAAD,WACE,SAACZ,EAAD,CAASG,QAPe,SAAAI,GACtBA,EAAEM,SAAWN,EAAEO,eACjBX,GAEH,EAGG,UACE,SAACF,EAAD,UAAYG,OAInB,EChBYW,EAAW,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMzD,EAAc,EAAdA,QACvB5B,EAAqBqF,EAArBrF,KAAMK,EAAegF,EAAfhF,OAAQiF,EAAOD,EAAPC,GAChBC,EAAe,CACnBvF,KAAMA,EACNK,OAAQA,GAGJwB,GAAWC,EAAAA,EAAAA,MAQjB,OACE,SAACE,EAAA,EAAD,WACE,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,GAAI,CAAEC,eAAgB,SAAUoD,OAAQ,SAAxD,UACE,SAACnD,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,WACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,2BACA,SAAC,KAAD,CACEd,cAAe4D,EACf7C,iBAAkB7C,EAAAA,GAClB8C,SAhBgB,SAAC0C,EAAMlC,GACjCtB,GAAS4D,EAAAA,EAAAA,IAAc,CAAEH,GAAAA,EAAID,KAAAA,KAC7BzD,IACAuB,EAAMN,YACNhB,GAAS6D,EAAAA,EAAAA,MACV,EAQS,SAKG,SAAAvC,GACC,OACE,UAAC,KAAD,YAEE,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,MAAM,OACNC,KAAK,OACLvD,KAAK,OACLwD,WAAS,EACTf,QAAQ,WACRgB,OAAO,QACPC,YAAY,SAAC,KAAD,CAAc1D,KAAK,SAC/B2D,MAAOR,EAAMS,OAAOpD,OAAS2C,EAAMU,QAAQrD,SAG7C,SAAC,KAAD,CACE4C,GAAIC,EAAAA,EACJC,MAAM,SACNtD,KAAK,SACLuD,KAAK,MACLC,WAAS,EACTf,QAAQ,WACRgB,OAAO,QACPC,YAAY,SAAC,KAAD,CAAc1D,KAAK,WAC/B2D,MAAOR,EAAMS,OAAOnD,UAAY0C,EAAMU,QAAQpD,YAGhD,SAACqD,EAAA,EAAD,CACE3B,GAAI,CAAEwD,UAAW,UACjBlD,QAAQ,YACRc,KAAK,SACLS,MAAM,UAJR,sBAUL,YAOd,E,uCC7BD,EAzCoB,SAAC,GAAuC,IAAD,IAApCxC,QAAWxB,EAAyB,EAAzBA,KAAMK,EAAmB,EAAnBA,OAAQiF,EAAW,EAAXA,GACxCM,EAAe,CAAE5F,KAAAA,EAAMK,OAAAA,EAAQiF,GAAAA,GACrC,GAA4BO,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,EAAqB,kBAAMD,GAAWD,EAAjB,EACrBjE,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iCACE,UAACmC,EAAD,YACE,UAACE,EAAD,WACGnE,EADH,MACU,SAACoE,EAAD,UAAe/D,QAEzB,UAACiC,EAAA,EAAD,YACE,SAAC2D,EAAA,EAAD,CAASC,MAAM,OAAf,UACE,SAACC,EAAA,EAAD,CAAY3B,QAASwB,EAArB,UACE,SAACI,EAAA,EAAD,SAGJ,SAACH,EAAA,EAAD,CAASC,MAAM,SAAf,UACE,SAACC,EAAA,EAAD,CAAY3B,QAfM,kBAAM3C,GAASwE,EAAAA,EAAAA,IAAcf,GAA7B,EAelB,UACE,SAACgB,EAAA,EAAD,cAKPR,IACC,SAACvB,EAAD,CAAOC,QAASwB,EAAhB,UACE,SAACZ,EAAD,CAAUxD,QAASoE,EAAoBX,KAAMO,QAKtD,EC9CYW,EAAiBrC,EAAAA,EAAAA,GAAH,kICwC3B,EAjCoB,WAClB,IAAMsC,GAAkBzE,EAAAA,EAAAA,IAAYT,GAC9BO,GAAWC,EAAAA,EAAAA,MAMjB,OAJA4C,EAAAA,EAAAA,YAAU,WACR7C,GAAS6D,EAAAA,EAAAA,MACV,GAAE,CAAC7D,KAGF,8BACG2E,EAAgBC,OAAS,IACxB,SAACF,EAAD,UACGC,EAAgBE,KAAI,SAAAlF,GAAO,OAC1B,yBACE,SAAC,EAAD,CAAaA,QAASA,KADfA,EAAQ8D,GADS,OASrC,E,oBCED,EAzBe,WACb,IAAMzD,GAAWC,EAAAA,EAAAA,MACX6E,GAAc5E,EAAAA,EAAAA,IAAYX,GAMhC,OACE,SAAC,IAAD,WACE,SAACiC,EAAA,EAAD,CACEiC,GAAG,SACHhC,MAAM,wBACNb,QAAQ,WACRmE,MAAOD,EACPE,SAXe,SAAAjC,GACnB,IAAMgC,EAAQhC,EAAEO,cAAcyB,MAAMnF,cACpCI,GAASiF,EAAAA,EAAAA,GAAeF,GACzB,KAYF,E,UCOD,EAzBiB,WACf,OAA4Bf,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,EAAqB,kBAAMD,GAAWD,EAAjB,EAC3B,OACE,iCACE,UAACxD,EAAA,EAAD,CAAKH,GAAI,CAAE4E,QAAS,OAAQC,IAAK,OAAQC,WAAY,SAAU1E,EAAG,GAAlE,WACE,SAAC0D,EAAA,EAAD,CAASC,MAAM,mBAAf,UACE,SAACC,EAAA,EAAD,CAAY3B,QAASwB,EAArB,UACE,SAACkB,EAAA,EAAD,SAGJ,SAAC,EAAD,OAGDpB,IACC,SAACvB,EAAD,CAAOC,QAASwB,EAAhB,UACE,SAAC,EAAD,CAAapE,QAASoE,OAI1B,SAAC,EAAD,MAGL,C","sources":["components/helpers/yupValidation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/helpers/formCheckers.js","components/ContactItem/ContactItem.styled.jsx","components/MainModal/ModalMain.styled.jsx","components/MainModal/Modal.jsx","components/EditForm/EditForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { string, object, ref } from 'yup';\nimport 'yup-phone';\n\nexport const contactYupSchema = object().shape({\n  name: string().trim().strict().required(),\n  number: string().phone('UA').required(),\n});\n\nexport const yupRegisterValidation = object().shape({\n  name: string().trim().strict().required('Required !'),\n  email: string().email('Enter a Vaid Email').required('Email is Required'),\n  password: string()\n    .required('Enter Your Password')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(50, 'Too long'),\n  confirmPassword: string()\n    .oneOf([ref('password')], 'Password does not matched')\n    .required('Confirm Password is Required'),\n});\n\nexport const yupLoginValidation = object().shape({\n  email: string().email('Enter a Vaid Email').required('Email is Required'),\n  password: string()\n    .required('Enter Your Password')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(50, 'Too long'),\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import {\n  Box,\n  Container,\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { addContact } from 'redux/contacts/contactService';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { checkContact, checkPhone } from 'components/helpers/formCheckers';\nimport { contactYupSchema } from 'components/helpers/yupValidation';\n\n// Initial values for formik\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(contacts, values)) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n    if (checkPhone(contacts, values)) {\n      alert(`${values.number} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Container>\n      <Grid container sx={{ justifyContent: 'center' }}>\n        <Paper>\n          <Box p={5}>\n            <Typography variant=\"h5\">Add contact</Typography>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={contactYupSchema}\n              onSubmit={handleSubmit}\n            >\n              {props => {\n                return (\n                  <Form>\n                    {/* Name */}\n                    <Field\n                      as={TextField}\n                      label=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"name\" />}\n                      error={props.errors.email && props.touched.email}\n                    />\n                    {/* Phone Number */}\n                    <Field\n                      as={TextField}\n                      label=\"number\"\n                      name=\"number\"\n                      type=\"tel\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"number\" />}\n                      error={props.errors.password && props.touched.password}\n                    />\n\n                    <Button\n                      sx={{ alignSelf: 'center' }}\n                      variant=\"contained\"\n                      type=\"submit\"\n                      color=\"primary\"\n                    >\n                      Submit\n                    </Button>\n                  </Form>\n                );\n              }}\n            </Formik>\n          </Box>\n        </Paper>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n\n// import {\n//   FormWrap,\n//   FormErrorMessage,\n//   FormInput,\n//   FormLabel,\n//   FormInputWrp,\n//   FormButton,\n// } from './ContactForm.styled';\n\n// <Formik\n//   initialValues={initialValues}\n//   validationSchema={contactYupSchema}\n//   onSubmit={handleSubmit}\n// >\n//   <FormWrap autoComplete=\"off\">\n//     <FormInputWrp htmlFor=\"name\">\n//       <FormLabel>Name</FormLabel>\n//       <FormInput type=\"text\" name=\"name\" />\n//       <FormErrorMessage name=\"name\" component=\"div\" />\n//     </FormInputWrp>\n\n//     <FormInputWrp htmlFor=\"number\">\n//       <FormLabel>Phone</FormLabel>\n//       <FormInput type=\"tel\" name=\"number\" />\n//       <FormErrorMessage name=\"number\" component=\"div\" />\n//     </FormInputWrp>\n\n//     <FormButton type=\"submit\">Add contact</FormButton>\n//   </FormWrap>\n// </Formik>;\n","export const checkContact = (contacts, values) => {\n  return contacts.find(contact => contact.name === values.name.trim());\n};\n\nexport const checkPhone = (contacts, values) => {\n  return contacts.find(contact => contact.phone === values.number.trim());\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItemWrp = styled.div`\n  width: 500px;\n  border-radius: 10px;\n  font-size: 20px;\n  padding: 10px 20px;\n  display: flex;\n  align-items: center;\n  background: linear-gradient(145deg, #0d013e, #2711ba);\n  box-shadow: 2px 6px 8px #2e2bc2, -2px -2px 6px #1d06eb;\n`;\n\nexport const ContactName = styled.p`\n  font-weight: 600;\n`;\n\nexport const ContactPhone = styled.span`\n  font-weight: 400;\n  margin-left: 20px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalBody = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import PropTypes from 'prop-types';\nimport { Overlay, ModalBody } from './ModalMain.styled';\nimport { useEffect } from 'react';\nimport Portal from '@mui/base/Portal';\n\nexport const Modal = ({ onClick, children }) => {\n  useEffect(() => {\n    const handleEscDown = e => {\n      if (e.code === 'Escape') {\n        onClick();\n      }\n    };\n    window.addEventListener('keydown', handleEscDown);\n    return () => {\n      window.removeEventListener('keydown', handleEscDown);\n    };\n  }, [onClick]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClick();\n    }\n  };\n  return (\n    <Portal>\n      <Overlay onClick={handleBackdropClick}>\n        <ModalBody>{children}</ModalBody>\n      </Overlay>\n    </Portal>\n  );\n};\n\nModal.propTypes = {\n  largeImageURL: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n","import {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { contactYupSchema } from 'components/helpers/yupValidation';\nimport { useDispatch } from 'react-redux';\nimport { changeContact, fetchContacts } from 'redux/contacts/contactService';\nimport { PropTypes } from 'prop-types';\nexport const EditForm = ({ data, onClose }) => {\n  const { name, number, id } = data;\n  const initialValue = {\n    name: name,\n    number: number,\n  };\n\n  const dispatch = useDispatch();\n  const handleChangeContact = (data, props) => {\n    dispatch(changeContact({ id, data }));\n    onClose();\n    props.resetForm();\n    dispatch(fetchContacts());\n  };\n\n  return (\n    <Container>\n      <Grid container sx={{ justifyContent: 'center', zIndex: 'modal' }}>\n        <Paper>\n          <Box p={5}>\n            <Typography variant=\"h5\">Edit contact</Typography>\n            <Formik\n              initialValues={initialValue}\n              validationSchema={contactYupSchema}\n              onSubmit={handleChangeContact}\n            >\n              {props => {\n                return (\n                  <Form>\n                    {/* Name */}\n                    <Field\n                      as={TextField}\n                      label=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"name\" />}\n                      error={props.errors.email && props.touched.email}\n                    />\n                    {/* Phone Number */}\n                    <Field\n                      as={TextField}\n                      label=\"number\"\n                      name=\"number\"\n                      type=\"tel\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"number\" />}\n                      error={props.errors.password && props.touched.password}\n                    />\n\n                    <Button\n                      sx={{ textAlign: 'center' }}\n                      variant=\"contained\"\n                      type=\"submit\"\n                      color=\"primary\"\n                    >\n                      Submit\n                    </Button>\n                  </Form>\n                );\n              }}\n            </Formik>\n          </Box>\n        </Paper>\n      </Grid>\n    </Container>\n  );\n};\n\nEditForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport {\n  ContactItemWrp,\n  ContactName,\n  ContactPhone,\n} from './ContactItem.styled';\nimport { deleteContact } from 'redux/contacts/contactService';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { Modal } from '../MainModal/Modal';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { IconButton, Tooltip, Box } from '@mui/material';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\n\nconst ContactItem = ({ contact: { name, number, id } }) => {\n  const actualFields = { name, number, id };\n  const [isOpen, setIsOpen] = useState(false);\n  const handleToggleIsOpen = () => setIsOpen(!isOpen);\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <ContactItemWrp>\n        <ContactName>\n          {name}: <ContactPhone>{number}</ContactPhone>\n        </ContactName>\n        <Box>\n          <Tooltip title=\"Edit\">\n            <IconButton onClick={handleToggleIsOpen}>\n              <ModeEditIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete\">\n            <IconButton onClick={handleDeleteContact}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </ContactItemWrp>\n      {isOpen && (\n        <Modal onClick={handleToggleIsOpen}>\n          <EditForm onClose={handleToggleIsOpen} data={actualFields} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const ContactListWrp = styled.ul`\n  font-size: 20px;\n  display: flex;\n  gap: 8px;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n","import ContactItem from 'components/ContactItem';\nimport PropTypes from 'prop-types';\nimport { ContactListWrp } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactService';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {visibleContacts.length > 0 && (\n        <ContactListWrp>\n          {visibleContacts.map(contact => (\n            <li key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          ))}\n        </ContactListWrp>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { TextField } from '@mui/material';\nimport { Box } from '@mui/system';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const changeFilter = e => {\n    const value = e.currentTarget.value.toLowerCase();\n    dispatch(setFilterValue(value));\n  };\n  return (\n    <Box>\n      <TextField\n        id=\"filter\"\n        label=\"Find contacts by name\"\n        variant=\"standard\"\n        value={filterValue}\n        onChange={changeFilter}\n      />\n    </Box>\n  );\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport AddIcon from '@mui/icons-material/Add';\nimport { IconButton, Tooltip } from '@mui/material';\nimport { useState } from 'react';\nimport { Modal } from 'components/MainModal/Modal';\nimport { Box } from '@mui/material';\nconst Contacts = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleToggleIsOpen = () => setIsOpen(!isOpen);\n  return (\n    <>\n      <Box sx={{ display: 'flex', gap: '2rem', alignItems: 'center', p: 3 }}>\n        <Tooltip title=\"Add your contact\">\n          <IconButton onClick={handleToggleIsOpen}>\n            <AddIcon />\n          </IconButton>\n        </Tooltip>\n        <Filter />\n      </Box>\n\n      {isOpen && (\n        <Modal onClick={handleToggleIsOpen}>\n          <ContactForm onClose={handleToggleIsOpen} />\n        </Modal>\n      )}\n\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["contactYupSchema","object","shape","name","string","trim","strict","required","number","phone","yupRegisterValidation","email","password","min","max","confirmPassword","oneOf","ref","yupLoginValidation","selectContacts","state","contacts","items","selectFilterValue","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes","initialValues","onClose","dispatch","useDispatch","useSelector","Container","Grid","container","sx","justifyContent","Paper","Box","p","Typography","variant","validationSchema","onSubmit","values","resetForm","find","checkContact","checkPhone","addContact","alert","props","as","TextField","label","type","fullWidth","margin","helperText","error","errors","touched","Button","alignSelf","color","ContactItemWrp","styled","ContactName","ContactPhone","Overlay","ModalBody","Modal","onClick","children","useEffect","handleEscDown","e","code","window","addEventListener","removeEventListener","Portal","target","currentTarget","EditForm","data","id","initialValue","zIndex","changeContact","fetchContacts","textAlign","actualFields","useState","isOpen","setIsOpen","handleToggleIsOpen","Tooltip","title","IconButton","ModeEdit","deleteContact","DeleteForever","ContactListWrp","visibleContacts","length","map","filterValue","value","onChange","setFilterValue","display","gap","alignItems","Add"],"sourceRoot":""}
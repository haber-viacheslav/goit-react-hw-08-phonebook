{"version":3,"file":"static/js/648.c4ffd6ec.chunk.js","mappings":"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","sources":["components/helpers/yupValidation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/helpers/formCheckers.js","components/MainModal/ModalMain.styled.jsx","components/MainModal/Modal.jsx","components/EditForm/EditForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { string, object, ref } from 'yup';\nimport 'yup-phone';\n\nexport const contactYupSchema = object().shape({\n  name: string().trim().strict().required(),\n  number: string().phone('UA').required(),\n});\n\nexport const yupRegisterValidation = object().shape({\n  name: string().trim().strict().required('Required !'),\n  email: string().email('Enter a Vaid Email').required('Email is Required'),\n  password: string()\n    .required('Enter Your Password')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(50, 'Too long'),\n  confirmPassword: string()\n    .oneOf([ref('password')], 'Password does not matched')\n    .required('Confirm Password is Required'),\n});\n\nexport const yupLoginValidation = object().shape({\n  email: string().email('Enter a Vaid Email').required('Email is Required'),\n  password: string()\n    .required('Enter Your Password')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(50, 'Too long'),\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import {\n  Box,\n  Container,\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { addContact } from 'redux/contacts/contactService';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { checkContact, checkPhone } from 'components/helpers/formCheckers';\nimport { contactYupSchema } from 'components/helpers/yupValidation';\nimport { toast } from 'react-hot-toast';\n\n// Initial values for formik\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(contacts, values)) {\n      toast.error(`Error! 😲 ${values.name} is already in contacts`, {\n        duration: 2000,\n        style: {\n          borderRadius: '10px',\n          background: '#333',\n          color: '#fff',\n        },\n      });\n      return;\n    }\n    if (checkPhone(contacts, values)) {\n      toast.error(`Error! 😲 ${values.number} is already in contacts`, {\n        duration: 2000,\n        style: {\n          borderRadius: '10px',\n          background: '#333',\n          color: '#fff',\n        },\n      });\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Container>\n      <Grid container sx={{ justifyContent: 'center' }}>\n        <Paper>\n          <Box p={5}>\n            <Typography variant=\"h5\">Add contact</Typography>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={contactYupSchema}\n              onSubmit={handleSubmit}\n            >\n              {props => {\n                return (\n                  <Form>\n                    {/* Name */}\n                    <Field\n                      size=\"small\"\n                      as={TextField}\n                      label=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"name\" />}\n                      error={props.errors.email && props.touched.email}\n                      required\n                    />\n                    {/* Phone Number */}\n                    <Field\n                      size=\"small\"\n                      as={TextField}\n                      label=\"number\"\n                      name=\"number\"\n                      type=\"tel\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"number\" />}\n                      error={props.errors.password && props.touched.password}\n                      required\n                    />\n\n                    <Button\n                      variant=\"contained\"\n                      type=\"submit\"\n                      color=\"primary\"\n                      fullWidth\n                    >\n                      Submit\n                    </Button>\n                  </Form>\n                );\n              }}\n            </Formik>\n          </Box>\n        </Paper>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n\n// import {\n//   FormWrap,\n//   FormErrorMessage,\n//   FormInput,\n//   FormLabel,\n//   FormInputWrp,\n//   FormButton,\n// } from './ContactForm.styled';\n\n// <Formik\n//   initialValues={initialValues}\n//   validationSchema={contactYupSchema}\n//   onSubmit={handleSubmit}\n// >\n//   <FormWrap autoComplete=\"off\">\n//     <FormInputWrp htmlFor=\"name\">\n//       <FormLabel>Name</FormLabel>\n//       <FormInput type=\"text\" name=\"name\" />\n//       <FormErrorMessage name=\"name\" component=\"div\" />\n//     </FormInputWrp>\n\n//     <FormInputWrp htmlFor=\"number\">\n//       <FormLabel>Phone</FormLabel>\n//       <FormInput type=\"tel\" name=\"number\" />\n//       <FormErrorMessage name=\"number\" component=\"div\" />\n//     </FormInputWrp>\n\n//     <FormButton type=\"submit\">Add contact</FormButton>\n//   </FormWrap>\n// </Formik>;\n","export const checkContact = (contacts, values) => {\n  return contacts.find(contact => contact.name === values.name.trim());\n};\n\nexport const checkPhone = (contacts, values) => {\n  return contacts.find(contact => contact.number === values.number.trim());\n};\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalBody = styled.div`\n  max-width: calc(100vw - 10px);\n  max-height: calc(100vh - 10px);\n`;\n","import PropTypes from 'prop-types';\nimport { Overlay, ModalBody } from './ModalMain.styled';\nimport { useEffect } from 'react';\nimport Portal from '@mui/base/Portal';\n\nexport const Modal = ({ onClick, children }) => {\n  useEffect(() => {\n    const handleEscDown = e => {\n      if (e.code === 'Escape') {\n        onClick();\n      }\n    };\n    window.addEventListener('keydown', handleEscDown);\n    return () => {\n      window.removeEventListener('keydown', handleEscDown);\n    };\n  }, [onClick]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClick();\n    }\n  };\n  return (\n    <Portal>\n      <Overlay onClick={handleBackdropClick}>\n        <ModalBody>{children}</ModalBody>\n      </Overlay>\n    </Portal>\n  );\n};\n\nModal.propTypes = {\n  largeImageURL: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n","import {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { contactYupSchema } from 'components/helpers/yupValidation';\nimport { useDispatch } from 'react-redux';\nimport { changeContact, fetchContacts } from 'redux/contacts/contactService';\nimport { PropTypes } from 'prop-types';\n\nexport const EditForm = ({ data, onClose }) => {\n  const { name, number, id } = data;\n  const initialValue = {\n    name: name,\n    number: number,\n  };\n\n  const dispatch = useDispatch();\n  const handleChangeContact = (data, props) => {\n    dispatch(changeContact({ id, data }));\n    onClose();\n    props.resetForm();\n    dispatch(fetchContacts());\n  };\n\n  return (\n    <Container>\n      <Grid container sx={{ justifyContent: 'center' }}>\n        <Paper>\n          <Box p={5}>\n            <Typography variant=\"h5\">Edit contact</Typography>\n            <Formik\n              initialValues={initialValue}\n              validationSchema={contactYupSchema}\n              onSubmit={handleChangeContact}\n            >\n              {props => {\n                return (\n                  <Form>\n                    {/* Name */}\n                    <Field\n                      as={TextField}\n                      label=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"name\" />}\n                      error={props.errors.email && props.touched.email}\n                      size=\"small\"\n                    />\n                    {/* Phone Number */}\n                    <Field\n                      as={TextField}\n                      label=\"number\"\n                      name=\"number\"\n                      type=\"tel\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      helperText={<ErrorMessage name=\"number\" />}\n                      error={props.errors.password && props.touched.password}\n                      size=\"small\"\n                    />\n\n                    <Button\n                      sx={{ textAlign: 'center' }}\n                      variant=\"contained\"\n                      type=\"submit\"\n                      color=\"primary\"\n                    >\n                      Submit\n                    </Button>\n                  </Form>\n                );\n              }}\n            </Formik>\n          </Box>\n        </Paper>\n      </Grid>\n    </Container>\n  );\n};\n\nEditForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { getRandomColor } from 'components/helpers/getRandomColor';\nimport { deleteContact } from 'redux/contacts/contactService';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { Modal } from '../MainModal/Modal';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { IconButton, Tooltip, Box, Typography } from '@mui/material';\nimport Portal from '@mui/base/Portal';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\n\nconst ContactItem = ({ contact: { name, number, id } }) => {\n  const actualFields = { name, number, id };\n  const [isOpen, setIsOpen] = useState(false);\n  const handleToggleIsOpen = () => setIsOpen(!isOpen);\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <Box\n        sx={{\n          p: '1rem',\n          borderRadius: '0.2rem',\n          boxShadow: `2px 3px 3px ${getRandomColor()}`,\n          background: `linear-gradient(145deg, ${getRandomColor()}26, ${getRandomColor()}26)`,\n          width: { xs: '260px', sm: '440px' },\n          display: 'flex',\n          alignItems: 'center',\n          position: 'relative',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', sm: 'row', lg: 'column' },\n            gap: { sm: '1.2rem', lg: '0.2rem' },\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"subtitle1\">{name}:</Typography>\n          <Typography variant=\"body1\">{number}</Typography>\n        </Box>\n\n        <Box\n          sx={{\n            ml: 'auto',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.5rem',\n          }}\n        >\n          <Tooltip title=\"Edit\">\n            <IconButton onClick={handleToggleIsOpen}>\n              <ModeEditIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete\">\n            <IconButton onClick={handleDeleteContact}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {isOpen && (\n        <Portal>\n          <Modal onClick={handleToggleIsOpen}>\n            <EditForm onClose={handleToggleIsOpen} data={actualFields} />\n          </Modal>\n        </Portal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const ContactListWrp = styled.ul`\n  font-size: 20px;\n  display: flex;\n  gap: 8px;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n","import ContactItem from 'components/ContactItem';\nimport PropTypes from 'prop-types';\nimport { ContactListWrp } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactService';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {visibleContacts.length > 0 && (\n        <ContactListWrp>\n          {visibleContacts.map(contact => (\n            <li key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          ))}\n        </ContactListWrp>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { TextField } from '@mui/material';\nimport { Box } from '@mui/system';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const changeFilter = e => {\n    const value = e.currentTarget.value.toLowerCase();\n    dispatch(setFilterValue(value));\n  };\n  return (\n    <Box>\n      <TextField\n        label={('margin=\"none\"', 'Find contacts by name')}\n        id=\"filter\"\n        variant=\"standard\"\n        value={filterValue}\n        onChange={changeFilter}\n        size=\"small\"\n      />\n    </Box>\n  );\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport AddIcon from '@mui/icons-material/Add';\nimport { IconButton, Tooltip, Container, Paper } from '@mui/material';\nimport { useState } from 'react';\nimport { Modal } from 'components/MainModal/Modal';\nimport { Box } from '@mui/material';\nconst Contacts = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleToggleIsOpen = () => setIsOpen(!isOpen);\n  return (\n    <Paper\n      sx={{ minHeight: { xs: '76vh', sm: '80vh', lg: '84vh', xl: '87vh' } }}\n    >\n      <Container\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Box sx={{ display: 'flex', gap: '2rem', alignItems: 'center', p: 3 }}>\n          <Tooltip title=\"Add your contact\">\n            <IconButton onClick={handleToggleIsOpen}>\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Filter />\n        </Box>\n        {isOpen && (\n          <Modal onClick={handleToggleIsOpen}>\n            <ContactForm onClose={handleToggleIsOpen} />\n          </Modal>\n        )}\n        <ContactList />\n      </Container>\n    </Paper>\n  );\n};\n\nexport default Contacts;\n"],"names":["contactYupSchema","object","shape","name","string","trim","strict","required","number","phone","yupRegisterValidation","email","password","min","max","confirmPassword","oneOf","ref","yupLoginValidation","selectContacts","state","contacts","items","selectFilterValue","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes","initialValues","_ref","onClose","dispatch","useDispatch","useSelector","_jsx","Container","children","Grid","container","sx","justifyContent","Paper","_jsxs","Box","p","Typography","variant","Formik","validationSchema","onSubmit","values","_ref2","resetForm","find","checkContact","checkPhone","addContact","toast","concat","duration","style","borderRadius","background","color","props","Form","Field","size","as","TextField","label","type","fullWidth","margin","helperText","ErrorMessage","error","errors","touched","Button","Overlay","styled","_templateObject","_taggedTemplateLiteral","ModalBody","_templateObject2","Modal","onClick","useEffect","handleEscDown","e","code","window","addEventListener","removeEventListener","Portal","target","currentTarget","EditForm","data","id","initialValue","changeContact","fetchContacts","textAlign","_ref$contact","actualFields","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","handleToggleIsOpen","_Fragment","boxShadow","getRandomColor","width","xs","sm","display","alignItems","position","flexDirection","lg","gap","ml","Tooltip","title","IconButton","ModeEditIcon","deleteContact","DeleteForeverIcon","ContactListWrp","visibleContacts","length","map","ContactItem","filterValue","value","onChange","setFilterValue","minHeight","xl","AddIcon","Filter","ContactForm","ContactList"],"sourceRoot":""}